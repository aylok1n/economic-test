{"version":3,"sources":["Components/Question.js","Tasks/Task1.js","App.js","reportWebVitals.js","index.js"],"names":["Question","question","options","answer","onCheck","className","FormControl","component","RadioGroup","name","map","i","index","FormControlLabel","value","control","Radio","sx","color","blue","label","onChange","data","require","Task1","props","React","useState","show","setShow","answers","setAnswers","result","setResult","style","marginTop","Container","maxWidth","slice","val","answ","display","justifyContent","marginBottom","Button","onClick","res","Object","entries","key","variant","length","App","location","useLocation","backgroundColor","width","Tabs","scrollButtons","pathname","Tab","Link","to","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94e07907.chunk.js","sourcesContent":["import React from 'react'\r\nimport './index.css';\r\nimport { FormControl, Radio, RadioGroup, FormControlLabel } from '@mui/material'\r\nimport { blue, } from '@mui/material/colors';\r\n\r\nexport const Question = ({ question, answer, options, onCheck }) => {\r\n\r\n    return (\r\n        <div className='question'>\r\n            <FormControl component=\"fieldset\">\r\n                <h1>{question}</h1>\r\n                <RadioGroup\r\n                    name=\"radio-buttons-group\"\r\n                >\r\n                    {options.map((i, index) => (\r\n                        <FormControlLabel\r\n                            key={index}\r\n                            value={index}\r\n                            control={<Radio sx={{\r\n                                color: blue[50],\r\n                                '&.Mui-checked': {\r\n                                    color: blue[200],\r\n                                },\r\n                            }} />}\r\n                            label={<span className=''>{i}</span>}\r\n                            onChange={() => onCheck(index)}\r\n                        />\r\n                    ))}\r\n                </RadioGroup>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Question","import React from 'react'\r\nimport Question from '../Components/Question'\r\nimport { Container, Button } from '@mui/material'\r\nimport './index.css';\r\n\r\nconst data = require('../data/task1.json')\r\n\r\nexport const Task1 = (props) => {\r\n    const [show, setShow] = React.useState(1)\r\n    const [answers, setAnswers] = React.useState({})\r\n    const [result, setResult] = React.useState(false)\r\n\r\n    const onCheck = (index, value) => {\r\n        if (show < index + 2) setShow(index + 2)\r\n        const answ = { ...answers }\r\n        answ[index] = value\r\n        setAnswers(answ)\r\n    }\r\n\r\n    const save = () => {\r\n        let res = 0\r\n        Object.entries(answers).map(([key, value]) => {\r\n            !!(data[key].answer === value) && res++\r\n        })\r\n        setResult(res)\r\n    }\r\n\r\n    return (\r\n        <div style={{ marginTop: 20 }} >\r\n            <Container maxWidth=\"sm\">\r\n                {\r\n                    data.slice(0, show).map((i, index) => (\r\n                        <Question key={index} {...i} onCheck={(val) => onCheck(index, val)} />\r\n                    ))\r\n                }\r\n                {\r\n                    !!(show === 11) && <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 80 }}>\r\n                        <Button onClick={save} variant=\"contained\">Результат</Button>\r\n                    </div>\r\n                }\r\n                {!!result && <h4>Вы набрали {result}/{data.length} баллов</h4>}\r\n            </Container>\r\n        </div >\r\n    )\r\n\r\n}\r\n\r\nexport default Task1","import { Container, Tab, Tabs } from '@mui/material'\r\nimport React from 'react';\r\nimport { Link, Route, Routes, useLocation } from 'react-router-dom';\r\nimport Task1 from './Tasks/Task1'\r\n\r\nfunction App() {\r\n    const location = useLocation();\r\n\r\n    return (\r\n        <>\r\n            <div style={{ backgroundColor: '#FFF', width: '100vw' }}>\r\n                <Tabs variant=\"scrollable\" scrollButtons=\"auto\" value={location.pathname}>\r\n                    <Tab label='Основные фонды предприятия' component={Link} to={`/economic-test/Task1`} value={`/economic-test/Task1`} />\r\n                    <Tab label='Еще тест' component={Link} to={`/economic-test/Task2`} value={`/economic-test/Task2`} />\r\n                </Tabs>\r\n            </div>\r\n            <Container maxWidth=\"sm\">\r\n                <div>\r\n                    <Routes>\r\n                        <Route index path={`/economic-test/Task1`} element={<Task1 />} />\r\n                        <Route path={`/economic-test/Task2`} element={<div>сука пусто</div>} />\r\n                    </Routes>\r\n                </div>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}